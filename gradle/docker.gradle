/*
    Gradle docker integration extension

    Created: 4th March, 2021
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright·(c)·2024,·HSPyLib
*/

import static org.apache.commons.io.output.NullOutputStream.NULL_OUTPUT_STREAM

buildscript {
   repositories {
      mavenCentral()
   }
   dependencies {
      classpath 'commons-io:commons-io:2.4'
   }
}

/* Helper Functions -------------------------------------------------------- */

Collection filesByPattern(String baseDir, String pattern) {
  def files = []
  fileTree(baseDir).visit { FileVisitDetails details ->
      if (!details.isDirectory() && details.name ==~ pattern) files << details.file
  }
  return files
}

/* Docker Containers -------------------------------------------------------- */
ext {
  containers = findProperty('containers') ?: []
}

/* Tasks ------------------------------------------------------------------- */

/* Check if docker agent is running */
task isDockerUp(type: Exec) {
  group = 'Docker'
  description = 'Check if docker agent is running'
  commandLine 'docker', 'ps'
  ignoreExitValue true
  standardOutput = NULL_OUTPUT_STREAM
  errorOutput = NULL_OUTPUT_STREAM
  doLast {
    if(execResult.getExitValue() == 0) {
       println "Docker agent is up"
    } else {
       throw new GradleException('Docker agent is down')
    }
  }
}

/* Find all available docker-compose.yml files from docker directory */
task findContainers(type: Task) {
  group = 'Docker'
  description = 'Find all available docker-compose.yml files from docker directory'
  doLast {
    def dockerDir = "${project.projectDir}/docker/composes"
    def dockerFiles = filesByPattern("${dockerDir}", /.*docker-compose\.ya?ml$/)
    dockerFiles.each { File file ->
      project.ext.containers << file.getParentFile().getName()
    }
  }
}

/* List all available docker containers */
task listContainers(type: Task) {
  group = 'Docker'
  description = 'List all available docker containers'
  dependsOn findContainers
  doLast {
    containers.each { c ->
      println "Container available: ${c}"
    }
  }
}

/* Start all containers as detached daemons */
task startAllContainers(type: Task) {
  group = 'Docker'
  description = 'Start all containers as detached daemons'
  dependsOn isDockerUp
  dependsOn listContainers
  doLast {
    containers.each { String container ->
      println "=> Starting container: ${container}"
      exec {
       workingDir = "${rootDir}/docker/${container}"
       commandLine 'docker', 'compose', 'up', '--force-recreate', '--build', '--remove-orphans', '--detach'
      }
    }
  }
}

/* Stop and remove all containers */
task stopAllContainers(type: Task) {
  group = 'Docker'
  description = 'Stop and remove all containers '
  dependsOn isDockerUp
  dependsOn listContainers
  doLast {
    containers.each { String container ->
      println "Stopping and removing container: ${container}"
      exec {
        workingDir = "${rootDir}/docker/${container}"
        commandLine 'docker', 'compose', 'rm', '--stop', '--force'
      }
    }
  }
}
