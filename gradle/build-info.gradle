/*
    Gradle build information and versioning extension
    Project: HSPyLib
    Created: 4th March, 2021

    Note: Following Semantic Versioning 2.0.0 => https://semver.org/
    - Increment the MAJOR version when making incompatible API changes
    - Increment the MINOR version when adding functionality in a backwards-compatible manner
    - Increment the PATCH version when making backwards-compatible bug fixes. (Source)
*/

import java.text.SimpleDateFormat

project.ext.build_info_file = 'build-info.properties'

task updateBuildInfo {
  group = 'Versioning'
  description = 'Update the build-info.properties file with current build and version numbers'
  outputs.upToDateWhen { false }
  doLast {
    def build_info_file = project.file("$project.ext.build_info_file")
    def build_datetime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS z").format(new Date())
    if (build_info_file.exists()) {
      build_info_file.delete()
    }
    build_info_file <<
        """###
#   (Automated) Build information
#   Do not modify by hand. Automatic field update
###

build.date = $build_datetime

# Application version.
app.version = $app_version

# PYTHON version used to compile.
python.version = $pythonVersion
"""
  }
}

/* Update the version file to match the build.gradle version */
task updateVersion {
  group = 'Versioning'
  description = 'Update the version file to match the build.gradle version'
  outputs.upToDateWhen { false }
  doLast {
    def new_ver = project.ext.app_version
    def v_file = new File("${versionFile}")
    def old_ver = v_file.text
    assert v_file.exists()
    println "Updating version from $old_ver to $new_ver"
    v_file.text = "$new_ver"
    ant.replaceregexp(file: "$v_file", match:'^([0-9]{1,2}\\.)[0-9]{1,3}$', replace:"$new_ver", flags:'g', byline:true)
    println "Project: [$project.ext.app_name] Version: " + file("$v_file").text
  }
}

/* Change build number */
task changeVersion(type: Task) {
  group = 'Versioning'
  description = 'Increment the build number for publishing'
  outputs.upToDateWhen { false }
  dependsOn check
  mustRunAfter check
  finalizedBy updateVersion
  doLast {
    def ver = project.ext.app_version
    def part = hasProperty('part') ? project.getProperty('part') : 'patch'
    println "Increment the ${part} number for publishing"
    // (major.minor.patch)
    exec {
      commandLine rootProject.python, '-m', 'bumpversion',
        '--allow-dirty', '--current-version', ver,
        part, 'gradle.properties'
    }
  }
}

/* Check current program version */
task version {
  group = 'Versioning'
  description = 'Check current program version'
  outputs.upToDateWhen { false }
  doLast { task ->
    println "Project: [$task.project.name] Version: $project.ext.app_version"
  }
}

/* List all properties from properties.gradle */
task listProperties {
  group = 'Versioning'
  description = 'List all properties from gradle.properties'
  outputs.upToDateWhen { false }
  doLast {
    def regex = /.*=.*$/
    File propsFile = project.file('gradle.properties')
    File depsFile = project.file('gradle/dependencies.gradle')
    if (propsFile.exists()) {
      println "\nChecking dependency usage at: $depsFile\n"
      propsFile.eachLine { line ->
        if (line?.trim() && line ==~ regex) {
          // Extract the name and version from line: '<property> = <value>'
          def (name, value) = line.tokenize('=')
          println "${name.padRight(40, ' ')} => ${value.padRight(10, ' ')}"
        }
      }
    }
  }
}

build.dependsOn(updateVersion)
build.finalizedBy(updateBuildInfo)
