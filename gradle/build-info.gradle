/*
    Gradle build information and versioning extension
    Project: HSPyLib
    Created: 4th March, 2021

    This module uses python module bumpver: https://pypi.org/project/bumpver/

    Note: Following Semantic Versioning 2.0.0 => https://semver.org/
    - Increment the MAJOR version when making incompatible API changes
    - Increment the MINOR version when adding functionality in a backwards-compatible manner
    - Increment the PATCH version when making backwards-compatible bug fixes. (Source)
*/

import java.text.SimpleDateFormat

project.ext.build_info_file = 'build-info.properties'

task updateBuildInfo {
  group = 'Versioning'
  description = 'Update the build-info.properties file with current build and version numbers'
  outputs.upToDateWhen { false }
  doLast {
    def build_info_file = project.file("$project.ext.build_info_file")
    def build_datetime = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS z").format(new Date())
    if (build_info_file.exists()) {
      build_info_file.delete()
    }
    build_info_file <<
        """###
#   (Automated) Build information
#   Do not modify by hand. Automatic field update
###

build.date = $build_datetime

# Application version.
app.version = $app_version

# PYTHON version used to compile.
python.version = $pythonVersion
"""
  }
}


/* Increment the build number for publishing (patch) */
task patchVersion(type: Task) {
  group = 'Versioning'
  description = 'Increment the build number for publishing (patch)'
  outputs.upToDateWhen { false }
  doLast {
    println "Patching the build number"
    exec {
      commandLine rootProject.python, '-m', 'bumpver', 'update', '--patch'
    }
  }
}

/* Check current program version */
task version {
  group = 'Versioning'
  description = 'Check current program version'
  outputs.upToDateWhen { false }
  doLast { task ->
    println "Module: [$task.project.name] Current Version: $project.ext.app_version"
  }
}

/* List all properties from properties.gradle */
task listProperties {
  group = 'Versioning'
  description = 'List all properties from gradle.properties'
  outputs.upToDateWhen { false }
  doLast {
    def regex = /.*=.*$/
    File propsFile = project.file('gradle.properties')
    File depsFile = project.file('gradle/dependencies.gradle')
    if (propsFile.exists()) {
      println "\nChecking dependency usage at: $depsFile\n"
      propsFile.eachLine { line ->
        if (line?.trim() && line ==~ regex) {
          // Extract the name and version from line: '<property> = <value>'
          def (name, value) = line.tokenize('=')
          println "${name.padRight(40, ' ')} => ${value.padRight(10, ' ')}"
        }
      }
    }
  }
}

patchVersion.finalizedBy(syncPythonPackages)
build.finalizedBy(updateBuildInfo)
buildOnly.finalizedBy(updateBuildInfo)
