/*
    Gradle dependencies extension

    Created: 4th March, 2021
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright·(c)·2024,·HSPyLib
*/

/* Project file definitions */
project.ext.depsFile = "$project.projectDir/dependencies.hspd"
project.ext.reqsFile = "$project.projectDir/src/main/requirements.txt"

/* Version mode map */
def modesMap = [
  lt:  '<', le: '<=',
  eq: '==', ne: '!=',
  gt:  '>', ge: '>=',
  compat: '~=', // Compatibility mode
  none: null // No mode set
]

/* List of project dependencies*/
project.ext.deps = []

/* Helper Functions -------------------------------------------------------- */

// Read .hspd files using the defined hspd syntax.
void readDependencies() {
  def depsFile = new File(depsFile)
  depsFile.eachLine { line ->
    def dep = null
     // All fields syntax
    if (dep = line =~ /package: ([a-zA-Z0-9-_.]+), version: (latest|[0-9]+(\.[0-9]+){0,4}), mode: (lt|le|eq|compat|ne|gt|ge|none)/) {
      dep.each {
        deps << [package: "${it[1]}", version: "${it[2]}", mode: "${it[4]}"]
      }
    }
    // All except mode syntax
    else if (dep = line =~ /package: ([a-zA-Z0-9-_.]+), version: (latest|[0-9]+(\.[0-9]+){0,4})/) {
      dep.each {
        deps << [package: "${it[1]}", version: "${it[2]}", mode: it[2] && it[2] != "latest" ? "compat" : "gt"]
      }
    }
    // Only package syntax
    else if (dep = line =~ /package: ([a-zA-Z0-9-_.]+)/) {
      dep.each {
        deps << [package: "${it[1]}", version: "latest", mode: "gt"]
      }
    }
    else {
      if ( line.startsWith('package: ') ) {
        throw new GradleException("Invalid hspd syntax $line. Usage: "
          + "package: <pkg_name>, version: [<latest>|versionNum], "
          + "[mode: <lt|le|eq|compat|ne|gt|ge|none>]")
      }
    }
  }
}

/* Tasks ------------------------------------------------------------------- */

/* List project dependencies */
task listDependencies(type: Task) {
  group = 'Dependencies'
  description = 'List project dependencies'
  doLast {
    println "\nListing dependencies from:\n\t${depsFile}\n"
    readDependencies()
    deps.each { dep ->
      println(
        "Package: ${dep.package}, Version: ${dep.version}, Mode: ${dep.mode}"
      )
    }
  }
}

/* Gather all project requirements and generate a requirements file */
task syncRequirements(type: Task) {
  group = 'Dependencies'
  description = 'Gather all project requirements and generate a requirements file'
  doLast {
    readDependencies()
    def requirements = new File(reqsFile)
    requirements.setText("###### Requirements file for $project.name ######\n\n")
    deps.each { dep ->
      def mode = modesMap[dep.mode]
      if ('latest' == dep.version) requirements.append("$dep.package\n")
      else {
        if (mode != null) requirements.append("$dep.package$mode$dep.version\n")
        else requirements.append("$dep.package\n")
      }
    }
  }
}

/* Install all required python packages */
task installDependencies(type: Task) {
  group = 'Dependencies'
  description = 'Install all required python packages'
  dependsOn syncRequirements
  doLast {
    def req_file = new File("${project.ext.sourceRoot}/main/requirements.txt")
    println "\nInstalling \"${project.name}\" dependencies using ${rootProject.python}"
    println "Requirements file: \n\t" + req_file
    println "Required Packages:"
    req_file.each { dep ->
      if (dep && ! dep.startsWith("#")) {
        println "  |-" + dep
      }
    }
    println "Space: ${rootProject.space}"
    def args = [
      rootProject.python, '-m', 'pip', 'install', '-q',
      rootProject.space, '--upgrade', '-r', req_file.toString(),
      '--break-system-packages'
    ]
    exec {
      commandLine args.flatten()
    }
  }
}

/* Freeze dependencies to current installed versions. */
task freezeDependencies(type: Task) {
  group = 'Dependencies'
  description = 'Freeze dependencies to current installed versions'
  doLast {
    readDependencies()
    def output = new ByteArrayOutputStream()
    exec {
      commandLine rootProject.python, '-m', 'pip', 'freeze', '--all'
      standardOutput = output
    }
    def pipDeps = [:]
    output.toString().split('\n').each { line ->
      def dep = null
      if (dep = line =~ /([a-zA-Z0-9-_.]+)==([0-9]+(\.[0-9]+){0,3})/) {
        dep.each {
          pipDeps["${it[1]}"] = "${it[2]}"
        }
      }
      // Local dependency
      else if (dep = line =~ /([a-zA-Z0-9-_.]+) @ (file:\/{2,3}.+)/) {
        dep.each {
          pipDeps["${it[1]}"] = "latest"
        }
      }
    }
    println("\nFreezing [$project.name] Dependencies\n")
    deps.each { dep ->
      def pkgVersion = pipDeps["${dep.package}"]
      println("package: ${dep.package}, version: ${pkgVersion}, mode: ${dep.mode}")
    }
  }
}
