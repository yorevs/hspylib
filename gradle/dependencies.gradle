/*
    Gradle dependencies extension

    Created: 4th March, 2021
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright·(c)·2024,·HSPyLib
*/

/* Project file definitions */
project.ext.depsFile = "$project.projectDir/dependencies.hspd"
project.ext.reqsFile = "$project.projectDir/src/main/requirements.txt"

/* Version compatibility mode map */
def modesMap = [
  lt:  '<', le: '<=',
  eq: '==', ne: '!=',
  gt:  '>', ge: '>=',
  compat: '~=', // PIP Compatibility mode
  none: null    // No mode set workaround
]

/* Helper Functions -------------------------------------------------------- */

// Detect the package space to install dependencies.
String detectSpace() {

  def output = new ByteArrayOutputStream()
  exec {
    commandLine 'sh', '-c', "${project.ext.python} -c \"from sys import prefix, base_prefix; print(prefix != base_prefix);\""
    standardOutput = output
  }
  def is_venv = Boolean.parseBoolean(output.toString())
  println "> Build is" + (is_venv ? ' ' : ' NOT ') + "running under a virtual environment (venv)."

  return is_venv ? '--global' : '--user'
}

// Read .hspd files using the defined hspd syntax. Added \[\] as valid package names.
void readDependencies() {
  def depsFile = new File(depsFile)
  depsFile.eachLine { line ->
    def dep = null
     // All fields syntax
    if (dep = line =~ /package: (([\w.-]+)(\[[\w.-]+\])?), version: (latest|\d+(\.\d+){0,4}), mode: (lt|le|eq|compat|ne|gt|ge|none)/) {
      dep.each {
        deps << [package: "${it[1]}", version: "${it[4]}", mode: "${it[6]}"]
      }
    }
    // All except mode syntax
    else if (dep = line =~ /package: (([\w.-]+)(\[[\w.-]+\])?), version: (latest|\d+(\.\d+){0,4})/) {
      dep.each {
        deps << [package: "${it[1]}", version: "${it[4]}", mode: it[4] && it[4] != "latest" ? "compat" : "ge"]
      }
    }
    // Only package syntax
    else if (dep = line =~ /package: (([\w.-]+)(\[[\w.-]+\])?)/) {
      dep.each {
        deps << [package: "${it[1]}", version: "latest", mode: "ge"]
      }
    }
    else {
      if ( line.startsWith('package: ') ) {
        throw new GradleException("Invalid hspd syntax $line. Usage: "
          + "package: <pkg_name>, version: [<latest>|versionNum], "
          + "[mode: <lt|le|eq|compat|ne|gt|ge|none>]")
      }
    }
  }
}

ext {
  deps = []  // List of project dependencies
  space = detectSpace()  // the user space to install packages
}

/* Tasks ------------------------------------------------------------------- */

/* List project dependencies */
task listDependencies(type: Task) {
  group = 'Dependencies'
  description = 'List project dependencies'
  doLast {
    println "\nListing dependencies from:\n\t${depsFile}\n"
    readDependencies()
    deps.each { dep ->
      println(
        "Package: ${dep.package}, Version: ${dep.version}, Mode: ${dep.mode}"
      )
    }
  }
}

/* Gather all project requirements and generate a requirements file */
task syncRequirements(type: Task) {
  group = 'Dependencies'
  description = 'Gather all project requirements and generate a requirements file'
  doLast {
    readDependencies()
    def requirements = new File(reqsFile)
    requirements.setText("###### AUTO-GENERATED Requirements file for: ${project.name} ######\n\n")
    deps.each { dep ->
      def mode = modesMap[dep.mode]
      if ('latest' == dep.version) requirements.append("$dep.package\n")
      else {
        if (mode != null) requirements.append("$dep.package$mode$dep.version\n")
        else requirements.append("$dep.package\n")
      }
    }
  }
}

/* Install all required python packages */
task installPackages(type: Task) {
  group = 'Dependencies'
  description = 'Install all required python packages'
  dependsOn syncRequirements
  doLast {
    def req_file = new File("${project.ext.sourceRoot}/main/requirements.txt")
    println "\nInstalling \"${project.name}\" dependencies using ${project.python}"
    println "Requirements file: \n\t" + req_file
    println "Required Packages:"
    req_file.each { dep ->
      if (dep && ! dep.startsWith("#")) {
        println "  |-" + dep
      }
    }
    println "Space: ${project.space}"
    def args = [
      project.python, '-m', 'pip', 'install', '--no-warn-script-location',
      project.space, '--upgrade', '-r', req_file.toString(),
      '--break-system-packages'
    ]
    exec {
      commandLine args.flatten()
    }
  }
}

/* Uninstall all installed dependencies */
task removePackages(type: Task) {
  group = 'Dependencies'
  description = 'Uninstall all installed dependencies'
  dependsOn syncRequirements
  doLast {
    def req_file = new File("${project.ext.sourceRoot}/main/requirements.txt")
    println "\nUninstalling \"${project.name}\" dependencies using ${project.python}"
    println "Requirements file: \n\t" + req_file
    println "Installed Packages:"
    req_file.each { dep ->
      if (dep && ! dep.startsWith("#")) {
        println "  |-" + dep
      }
    }
    println "Space: ${project.space}"
    def args = [
      project.python, '-m', 'pip', 'uninstall', '-y',
      '-r', req_file.toString(), '--break-system-packages'
    ]
    exec {
      commandLine args.flatten()
    }
  }
}

/* Freeze dependencies to current installed versions. */
task freezeRequirements(type: Task) {
  group = 'Dependencies'
  description = 'Freeze dependencies to current installed versions'
  doLast {
    readDependencies()
    def output = new ByteArrayOutputStream()
    exec {
      commandLine project.python, '-m', 'pip', 'freeze', '--all'
      standardOutput = output
    }
    def pipDeps = [:]
    output.toString().split('\n').each { line ->
      def dep = null
      if (dep = line =~ /([\w.-]+)==(\d+(\.\d+){0,3})/) {
        dep.each {
          pipDeps[it[1]] = it[2]
        }
      }
      // Local dependency
      else if (dep = line =~ /([\w.-]+) @ (file:\/{3}.+)/) {
        dep.each {
          pipDeps[it[1]] = "latest"
        }
      }
      else {
        println("INVALID DEP: ${dep}  LINE: ${line}")
      }
    }
    println("\nFreezing [${project.name}] Dependencies\n")
    deps.each { dep ->
      def pkgVersion = pipDeps[dep.package]
      if (pkgVersion) {
        println("package: ${dep.package}, version: ${pkgVersion}, mode: ${dep.mode}")
      } else {
        println("package: ${dep.package} -> 'Not-Installed' " + pkgVersion)
      }
    }
  }
}
