/*
    Gradle documentation generation extension
    Project: HSPyLib
    Created: 30th April, 2021
*/

import java.text.SimpleDateFormat

def year = new SimpleDateFormat("yyyy").format(new Date())
def curDate = new SimpleDateFormat("EEE, d MMM yyyy").format(new Date())

/* File Headers Section ---------------------------------------------------- */

/**** PYTHON ****/
def PY_FILE_HEADER = """#!/usr/bin/env python3
# -*- coding: utf-8 -*-

\"\"\"
   TODO Purpose of the file
   @project: ${project.ext.app_name}
      @file: %filename%
   @created: ${curDate}
    @author: ${project.ext.author}"
      @site: ${project.ext.siteUrl}
   @license: MIT - Please refer to <https://opensource.org/licenses/MIT>

   Copyright ${year}, ${project.ext.app_name} team
\"\"\"
"""

/* Helper Functions -------------------------------------------------------- */

Collection filesByPattern(String baseDir, String pattern) {
  def paths = []
  fileTree(baseDir).visit { FileVisitDetails details ->
      if (!details.isDirectory() && details.name ==~ pattern) paths << details.file.path
  }
  return paths
}

String getPackageName(File file) {
  return file.getParentFile()
    .getCanonicalPath()
    .replaceAll("${sourceRoot}", "${project.ext.app_name.toLowerCase()}")
    .replaceAll("\\/", "\\.")
}

String processPythonHeader(File file, String header_template) {
    def pkg = getPackageName(file)
    def header = header_template
      .replaceAll("%filename%", file.getName())

    return header
}


/* Docgen tasks */

task syncPythonHeaders(type: Task) {
  group = 'Documentation'
  description = 'Synchronize all Python file headers'
  doLast {
    println "Synchronizing python headers"
    def files = filesByPattern(sourceRoot, /.*(?<!__init__)\.py$/)
    files.each {
      println "Processing file: ${it}"
      def fh_file = new File(it)
      def headers = processPythonHeader(fh_file, PY_FILE_HEADER)
      def parseState = 'headers' // headers -> imports -> code
      def imports = []
      def code = []
      def old_headers = []
      def has_old_headers = false
      fh_file.eachLine { String line ->
        if ('headers'.equals(parseState) && !(line ==~ /^(import|from) .*/)) {
          // Ignore all header lines (we could keep them tho)
          old_headers << line
          if (line.startsWith('"""')) {
            has_old_headers = true
          }
        }
        else if (line ==~ /^(import|from) .*/) {
          imports << line
          parseState = parseState.equals('headers') ? 'code' : parseState
        } else if ('code'.equals(parseState) || !(line.isEmpty() && line ==~ /^(import|from) .*/)) {
          code << line
        }
      }
      fh_file.setText("${has_old_headers ? old_headers.join('\n') : headers }\n${imports.join('\n')}\n${code.join('\n')}\n")
    }
    println "Finished processing all python files"
  }
}
