/*
    Gradle PyPi publisher extension
    Project: HSPyLib
    Created: 23rd April, 2021
*/

ext {
  pypiTestRepoUrl = "https://test.pypi.org/legacy/"
  pypiUsername = 'yorevs'
  pypiPassword = '^e32?g$eCwazbfC'
}

/* Cleanup distribution files */
task cleanDist(type: Delete) {
  group = 'Publish'
  description = "Cleanup distribution files from rootProject.projectDir"
  def projectRoot = "${rootProject.projectDir}"
  println "Cleanup distribution files from ${projectRoot}"
  delete "${projectRoot}/dist/"
  delete "${projectRoot}/build/"
  delete "${projectRoot}/hspylib.egg-info/"
}


/* Generate PyPi distribution files */
task dist(type: Task) {
  group = 'Publish'
  description = 'Generate PyPi distribution files'
  dependsOn cleanDist
  doLast {
    fileTree("${sourceRoot}").matching {
        include "**/setup.py"
      }.each { File module ->
          def moduleDir = module.getParentFile().getPath()
          println "Generating distribution files -> ${module.path}"
          exec {
            workingDir "${moduleDir}"
            commandLine rootProject.python, "${module.path}", 'sdist', 'bdist_wheel'
          }
        }
    }
}

/* Check on the files created in dist */
task checkDist(type: Task) {
  group = 'Publish'
  description = 'Check on the files created in dist'
  dependsOn dist
  File module = project.file('dist')
  doLast {
    if (module.exists() && !module.isFile()) {
      println "Checking distribution files -> ${module.path}"
      exec {
        commandLine rootProject.python, '-m', 'twine', 'check', "${module.path}/*"
      }
    } else {
      ant.fail("Invalid distribution directory: ${module.path}")
    }
  }
}

/* Publish the module into the PyPi "Test" repository */
task publishTest(type: Task) {
  group = 'Publish'
  description = "Publish the module into the PyPi \"Test\" repository"
  dependsOn checkDist
  File module = project.file('dist')
  def url = project.ext.pypiTestRepoUrl
  def un = project.ext.pypiUsername
  def pw = project.ext.pypiPassword
  doLast {
    if (module.exists() && !module.isFile()) {
      println "Publishing the ${module.path}/* into the PyPi repository => ${un}:${pw}@${url}"
      exec {
        commandLine rootProject.python, '-m', 'twine', 'upload', "${module.path}/*",
          '--verbose',
          '--repository-url', "${url}",
          '-u', "${un}",
          '-p', "${pw}"
      }
    } else {
      ant.fail("Invalid distribution directory: ${module.path}")
    }
  }
}
