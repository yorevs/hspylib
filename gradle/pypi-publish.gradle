/*
    Gradle PyPi publisher extension
    Project: HSPyLib
    Created: 23rd April, 2021
*/

ext {
  pypiTestRepoUrl = "https://test.pypi.org/legacy/"
  pypiUsername = 'yorevs'
  pypiPassword = '^e32?g$eCwazbfC'
}

/* Helper Functions -------------------------------------------------------- */
Collection dirsByPattern(String baseDir, String pattern) {
  def paths = []
  fileTree(baseDir).visit { FileVisitDetails details ->
      if (details.isDirectory() && details.name ==~ pattern) paths << details.file.path
  }
  return paths
}

/* Cleanup distribution files */
task cleanDist(type: Delete) {
  group = 'Publish'
  description = "Cleanup distribution files from rootProject.projectDir"
  def projectRoot = "${rootProject.projectDir}"
  println "Cleanup distribution files from ${projectRoot}"
  delete dirsByPattern(projectRoot, /.*dist$/)
  delete dirsByPattern(projectRoot, /.*build$/)
  delete dirsByPattern(projectRoot, /.*hspylib.egg-info$/)
}


/* Generate PyPi distribution files */
task dist(type: Task) {
  group = 'Publish'
  description = 'Generate PyPi distribution files'
  dependsOn cleanDist
  doLast {
    fileTree("${sourceRoot}").matching {
        include "**/setup.py"
      }.each { File module ->
          def moduleDir = module.getParentFile().getPath()
          println "Generating distribution files -> ${moduleDir}"
          exec {
            workingDir "${moduleDir}"
            commandLine rootProject.python, "setup.py", 'sdist', 'bdist_wheel'
          }
        }
    }
}

/* Check on the files created in dist */
task checkDist(type: Task) {
  group = 'Publish'
  description = 'Check on the files created in dist'
  dependsOn dist
  doLast {
    fileTree("${sourceRoot}").matching {
        include "**/setup.py"
      }.each { File module ->
        def moduleDir = module.getParentFile().getPath()
        def distDir = "${moduleDir}/dist"
        println "Checking distribution files -> ${distDir}"
        exec {
          workingDir "${moduleDir}"
          commandLine rootProject.python, '-m', 'twine', 'check', "${distDir}/*"
        }
    }
  }
}

/* Publish the module into the PyPi "Test" repository */
task publishTest(type: Task) {
  group = 'Publish'
  description = "Publish the module into the PyPi \"Test\" repository"
  dependsOn checkDist
  def url = project.ext.pypiTestRepoUrl
  def un = project.ext.pypiUsername
  def pw = project.ext.pypiPassword
  doLast {
    fileTree("${sourceRoot}").matching {
        include "**/setup.py"
      }.each { File module ->
        def moduleDir = module.getParentFile().getPath()
        def distDir = "${moduleDir}/dist"
        println "Publishing the ${distDir}/* into the PyPi repository => ${un}:${pw}@${url}"
        exec {
          workingDir "${moduleDir}"
          commandLine rootProject.python, '-m', 'twine', 'upload',
            '--verbose',
            '--repository-url', "${url}",
            '-u', "${un}",
            '-p', "${pw}",
            "${distDir}/*"
        }
    }
  }
}
