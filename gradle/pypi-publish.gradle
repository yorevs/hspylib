/*
    Gradle PyPi publisher extension
    Project: HSPyLib
    Created: 23rd April, 2021
*/

ext {
  pypiRepoUrl = System.getenv("PYPI_REPOSITORY") ?: 'https://upload.pypi.org/legacy/'
  pypiUsername = System.getenv("PYPI_USERNAME") ?: System.getenv("USER")
  pypiPassword = System.getenv("PYPI_PASSWORD") ?: ''
}


/* Helper Functions -------------------------------------------------------- */
Collection dirsByPattern(String baseDir, String pattern) {
  def paths = []
  fileTree(baseDir).visit { FileVisitDetails details ->
      if (details.isDirectory() && details.name ==~ pattern) paths << details.file.path
  }
  return paths
}

String dirName(File file) {
  file.getParentFile().getPath()
}

/* Generate PyPi distribution files */
task dist(type: Task) {
  group = 'Publish'
  description = 'Generate PyPi distribution files'
  dependsOn patchVersion
  dependsOn requirements
  doLast {
    fileTree("$sourceRoot").matching {
        include "**/setup.py"
      }.each { File module ->
          def moduleDir = dirName(module)
          println "Generating distribution files -> $moduleDir"
          exec {
            workingDir "$moduleDir"
            commandLine rootProject.python, "setup.py", 'sdist', 'bdist_wheel'
          }
        }
    }
}

/* Check on the files created in dist */
task checkDist(type: Task) {
  group = 'Publish'
  description = 'Check on the files created in dist'
  dependsOn dist
  doLast {
    fileTree("$sourceRoot").matching {
        include "**/setup.py"
      }.each { File module ->
        def moduleDir = dirName(module)
        def distDir = "$moduleDir/dist"
        println "Checking distribution files -> $distDir"
        exec {
          workingDir "$moduleDir"
          commandLine rootProject.python, '-m', 'twine', 'check', "$distDir/*"
        }
    }
  }
}

/* Publish the module to PyPi repository */
task publish(type: Task) {
  group = 'Publish'
  description = "Publish the module to PyPi repository"
  dependsOn checkDist
  dependsOn buildOnly
  def url = project.ext.pypiRepoUrl
  def un = project.ext.pypiUsername
  def pw = project.ext.pypiPassword
  doLast {
    fileTree("$sourceRoot").matching {
        include "**/setup.py"
      }.each { File module ->
        def moduleDir = dirName(module)
        def distDir = "$moduleDir/dist"
        println '--'
        println "|-version: $project.ext.app_version"
        println "|-setup: $module"
        println "|-url: $url"
        println "|-user: $un"
        println "|-dist: $distDir/*"
        println '--'
        println "Publishing module to PyPi..."
        exec {
          workingDir "$moduleDir"
          commandLine rootProject.python, '-m', 'twine', 'upload',
            '--verbose',
            '--repository-url', "$url",
            '-u', "$un",
            '-p', "$pw",
            "$distDir/*"
        }
    }
  }
}
