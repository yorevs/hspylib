/*
    Poetry integration extension

    Created: 29th August, 2024
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright (c) 2024, HomeSetup
*/

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

project.ext.projTomlFile = "${project.projectDir}/pyproject.toml"
project.ext.setupFile = "${project.projectDir}/src/main/setup.py"


/* Gather all project requirements and sync with the pyproject file */
task syncDevDependencies {
  group = 'Poetry'
  description = "Gather all project requirements and sync with the pyproject file"
  dependsOn syncRequirements

  // Set the input file paths
  def requirementsFile = file(project.reqsFile)
  def pyprojectFile = file(project.projTomlFile)

  doLast {
    println "\nReading requirements: \n  > From: ${project.reqsFile} \n  > Into: ${project.projTomlFile}\n"
    println "Packages:"

    // Read and parse the requirements.txt file
    def dependencies = [:]
    requirementsFile.eachLine { line ->
        line = line.trim() // Trim whitespace from the line
        if (line && ! line.startsWith('#')) { // Skip empty lines
          def extrasMatch = line =~ /(.*)\[(.*)\](.*)/
          def pkgMatch = line =~ /(.*)(.*)/
          // Packages with extras
          if (extrasMatch) {
            def name = extrasMatch[0][1].trim()
            def extras = extrasMatch[0][2].trim().split(',').collect { "\"${it.trim()}\"" }
            def version = extrasMatch[0][3].trim()
            dependencies[name] = [version: version, extras: extras]
            println "  |-${name}${extras} ${version}"
          }
          // Normal packages
          else if (pkgMatch) {
            def parts = line.split('<|<=|==|!=|>|>=|~=| ')
            def name = parts[0].trim()
            def version = line.replace(name, '').trim()
            dependencies[name] = [version: version]
            println "  |-${name} ${version}"
          }
          // Unversioned packages
          else {
            dependencies[name] = [version: 'latest']
            println "  |-${name}"
          }
        }
      }

      // Read the pyproject.toml file
      def pyproject = pyprojectFile.text

      // Wipe out the existing [tool.poetry.dependencies] section if it exists
      def devDepsRegex = /(?s)\[tool\.poetry\.dependencies\](?:.*?)(?=\n\[|\z)/
      pyproject = pyproject.replaceAll(devDepsRegex, '')

      // Build the new dependencies section
      def newSection = "[tool.poetry.dependencies]\n\n"
      dependencies.each { name, data ->
          if (data.extras) {
              newSection += "${name} = { version = \"${data.version}\", extras = [${data.extras.join(', ')}] }\n"
          }
          else {
              newSection += "${name} = \"${data.version}\"\n"
          }
      }

      // Append the new section to the pyproject.toml content
      pyproject += newSection

      // Write the updated content back to pyproject.toml
      pyprojectFile.text = pyproject

      println "\nPoetry dependencies have been updated!."
  }
}

task syncBuildSystemRequirements {
  group = 'Poetry'
  description = "Gather all project requirements and sync with the pyproject file"
  dependsOn installBuildTools

  // Set the input file paths
  def buildToolsFile = file(project.buildToolsFile)
  def pyprojectFile = file(project.projTomlFile)

  doLast {
    // Read and parse the buildToolsFile
    def requirements = []
    buildToolsFile.eachLine { line ->
      line = line.trim() // Trim whitespace from the line
      if (line && !line.startsWith('#')) { // Skip empty lines and comments
        requirements << "\"${line}\""
      }
    }

    if (requirements.isEmpty()) {
      println "No valid entries found in buildToolsFile. The requires attribute will be empty."
    }

    // Read the pyproject.toml file
    def pyproject = pyprojectFile.text

    // Regex to match the [build-system] section and its contents
    def buildSystemRegex = /(?s)\[build-system\](.*?)(?=\n\[|\z)/
    pyproject = pyproject.replaceAll(buildSystemRegex) { match, content ->
      def newBuildSystemSection = "[build-system]\n\n"
      newBuildSystemSection += "requires = [\n"
      requirements.each { req ->
        newBuildSystemSection += "  ${req},\n"
      }
      newBuildSystemSection += "]\n"
      newBuildSystemSection += "build-backend = \"poetry.core.masonry.api\"\n"
      return newBuildSystemSection
    }

    // Write the updated content back to pyproject.toml
    pyprojectFile.text = pyproject

    println "Build-system requires attribute has been updated with entries from buildToolsFile."
  }
}

/* Gather project project information from setup.py file */
task syncSetupPy {
  group = 'Poetry'
  description = "Gather project project information from setup.py file"

  def setupFile = file(project.setupFile)
  def pyprojectFile = file(project.projTomlFile)

  doLast {
    // Read the setup.py file
    def setupContent = setupFile.text

    // Extract relevant fields from setup.py using regex
    def nameMatch = (setupContent =~ /name=['"](.+?)['"]/)
    def versionMatch = (setupContent =~ /version=['"](.+?)['"]/)
    def descriptionMatch = (setupContent =~ /description=['"](.+?)['"]/)
    def authorMatch = (setupContent =~ /author=['"](.+?)['"]/)
    def authorEmailMatch = (setupContent =~ /author_email=['"](.+?)['"]/)
    def licenseMatch = (setupContent =~ /license=['"](.+?)['"]/)
    def readmeMatch = (setupContent =~ /README\s*=\s*\(HERE\s*\/\s*["'](.+?)["']\)\.read_text\(\)/)
    def urlMatch = (setupContent =~ /url=['"](.+?)['"]/)
    def classifiersMatch = (setupContent =~ /classifiers=\[\s*(.*?)\s*\]/)
    def projectUrlsMatch = (setupContent =~ /project_urls\s*=\s*\{([^}]+)\}/)

    // Prepare a map with the extracted values
    def setupData = [:]
    if (nameMatch) setupData['name'] = nameMatch[0][1]
    if (versionMatch) setupData['version'] = versionMatch[0][1]
    if (descriptionMatch) setupData['description'] = descriptionMatch[0][1]
    if (authorMatch) setupData['authors'] = [authorMatch[0][1]]
    if (authorEmailMatch) setupData['authors'][0] += " <${authorEmailMatch[0][1]}>"
    if (licenseMatch) setupData['license'] = licenseMatch[0][1]
    if (readmeMatch) setupData['readme'] = readmeMatch[0][1]
    if (urlMatch) setupData['repository'] = urlMatch[0][1]

    // Process classifiers for multiline content
    if (classifiersMatch) {
      def classifiersRaw = classifiersMatch[0][1]
      def classifiers = classifiersRaw.split(/['"]?\s*,\s*['"]?/).collect { it.trim().replaceAll(/['"]/, "") }
      setupData['classifiers'] = classifiers.findAll { it }
    }

    // Process project_urls
    def projectUrls = [:]
    if (projectUrlsMatch) {
      def urlsRaw = projectUrlsMatch[0][1].trim()
      def urlLines = urlsRaw.split(/,\s*/)
      urlLines.each { line ->
        def parts = line.split(/:\s+/, 2) // Fix to avoid splitting on "https:"
        if (parts.length == 2) {
          def key = parts[0].trim().replaceAll(/['"]/, "")
          def value = parts[1].trim().replaceAll(/['"]/, "")
          projectUrls[key] = value
        }
      }
    }

    // Read the pyproject.toml file
    def pyproject = pyprojectFile.text

    // Regex to match the [tool.poetry] section
    def poetrySectionRegex = /(?s)\[tool\.poetry\](.*?)(?=\n\[|\z)/
    pyproject = pyproject.replaceAll(poetrySectionRegex) { match, content ->
      def newPoetrySection = "[tool.poetry]\n"
      setupData.each { key, value ->
        if (key == 'authors') {
          newPoetrySection += "  ${key} = [\"${value[0]}\"]\n"
        } else if (key == 'classifiers') {
          newPoetrySection += "  ${key} = [\n"
          value.each { classifier ->
            newPoetrySection += "    \"${classifier}\",\n"
          }
          newPoetrySection += "  ]\n"
        } else {
          newPoetrySection += "  ${key} = \"${value}\"\n"
        }
      }
      return newPoetrySection
    }

    // Handle the [tool.poetry.urls] section replacement
    def urlsSectionRegex = /(?s)\[tool\.poetry\.urls\](.*?)(?=\n\[|\z)/
    def newUrlsSection = "[tool.poetry.urls]\n\n"
    projectUrls.each { key, value ->
      newUrlsSection += "${key} = \"${value}\"\n"
    }

    // Replace the existing section
    pyproject = pyproject.replaceAll(urlsSectionRegex, newUrlsSection)

    // Write the updated content back to pyproject.toml
    pyprojectFile.text = pyproject

    println "The [tool.poetry] section has been synchronized with setup.py."
  }
}

/* Synchronize the pyproject.file */
task syncPyProject {
  group = 'Poetry'
  description = "Synchronize the pyproject.file"
  dependsOn syncSetupPy
  dependsOn syncBuildSystemRequirements
  dependsOn syncDevDependencies
}

/* Install poetry dependencies */
task poetryInstall {
  group = 'Poetry'
  description = "Install poetry dependencies"
  dependsOn syncPyProject

  doLast {
    def args = [
      'poetry', 'install'
    ]
    exec {
      commandLine args.flatten()
    }
  }
}

/* Create a source distribution and a wheel */
task poetryBuild {
  group = 'Poetry'
  description = "Create a source distribution and a wheel"
  dependsOn syncPyProject

  doLast {
    exec {
      commandLine poetry, 'build'
    }
  }
}

/* Publish the project to PyPI */
task poetryPublish {
  group = 'Poetry'
  description = "Publish the project to PyPI"
  dependsOn syncPyProject

  doLast {
    exec {
      commandLine 'poetry', 'publish', '--build'
    }
  }
}
