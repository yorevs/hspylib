/*
    Gradle Python extension

    Created: 1st July, 2020
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright·(c)·2024,·HSPyLib
*/

ext {
  pythonPath = findProperty('pythonPath') ?: "${sourceRoot}/main:${sourceRoot}/test"
  failScore = findProperty('failScore') ?: 8.0
  versionFile = findProperty('versionFile') ?: "${sourceRoot}/main/${project.name}/.version"
}

/* Helper Functions -------------------------------------------------------- */

Collection dirsByPattern(String baseDir, String pattern) {
  def paths = []
  fileTree(baseDir).visit { FileVisitDetails details ->
    if (details.isDirectory() && details.name ==~ pattern) paths << details.file.path
  }
  return paths
}

String dirName(File file) {
  file.getParentFile().getPath()
}

/* Pylint disabled checks ------------------------------------------------- */
project.ext.pylint_disabled_checks =
  findProperty('pylint_disabled_checks') ?:
    [
      'C0103', // invalid-name
      'C0114', // missing-module-docstring
      'C0115', // missing-class-docstring
      'C0116', // missing-function-docstring
      'C0303', // trailing-whitespace
      'C0411', // wrong-import-order
      'E0603', // undefined-all-variable
      'E1101', // no-member
      'R0801', // duplicate-code
      'W0511', // fixme
      'W1113', // keyword-arg-before-vararg
      'C0301', // line-too-long
    ]

defaultTasks 'clean', 'run'

/***** Install Group */

/* Used to created the __init__.py files { */
def initTemplate = """# _*_ coding: utf-8 _*_
#
# $app_name v%version%
#
# Package: %package%
\"\"\"Package initialization.\"\"\"

__all__ = %modules%
__version__ = '%version%'
"""
/* } */

/***** Build Group */

/* Clean all compiled (*.py,*.qrc) and cached python files from sourceRoot */
task cleanPython(type: Task) {
  group = 'Build'
  description = 'Clean all compiled (*.py,*.qrc) and cached python files from sourceRoot'
  doLast {
    println "Cleaning all compiled files and cache directories \n\t from $sourceRoot"
    delete fileTree(sourceRoot).matching {
      include "**/*.pyc"
      include "**/*.qrc"
      include "**/*.log"
      include "**/requirements.txt"
    }
    delete dirsByPattern(sourceRoot, /.*__pycache__$/)
  }
}

/* Compile all python files from sourceRoot */
task compilePython(type: Task) {
  group = 'Build'
  description = 'Compile all python files from sourceRoot'
  dependsOn installPackages
  doLast {
    println "Compiling Python files from $project.name \n\t $sourceRoot"
    fileTree("${sourceRoot}").matching {
      include "**/*.py"
      exclude "**/__init__.py"
    }.each { File file ->
        if (verbose) println "Compiling Python file -> ${file.name}"
        exec {
          commandLine project.python, '-m', 'py_compile', file.path
        }
      }
  }
}

/* Compile all QT resources from sourceRoot */
task compileQrc(type: Task) {
  group = 'Build'
  description = 'Compile all Qt resource files from sourceRoot'
  dependsOn installPackages
  doLast {
    fileTree("$sourceRoot").matching {
      include "**/*.qrc"
    }.each { File file ->
        if (verbose) println "Compiling Qt Resource -> ${file.name}"
        exec {
          commandLine project.pyrcc, '-m', 'py_compile', file.path
        }
      }
  }
}

/***** Install Group */

/* Synchronize the buildTools file. */
task syncBuildTools(type: Task) {
  group = 'Build'
  description = 'Synchronize the buildTools file'
  doLast {
    buildToolsFile.setText("###### Build Tools Files for $project.name ######\n\n")
    def String[] buildTools = project.buildTools.split(',')
    buildTools.each { tool ->
      buildToolsFile.append("${tool.trim()}\n")
    }
  }
}

/* Install application build tools using Global space */
task installBuildTools(type: Task) {
  group = 'Build'
  description = 'Install application build tools using Global space'
  dependsOn syncBuildTools

  doLast {
    println "Installing \"${project.name}\" build tools: "
    println "Packages:"
    def String[] buildTools = project.buildTools.split(',')
    buildTools.each { tool ->
      println "  |-${tool.trim()}"
    }
    println "Space: --global"
    def args = [
      project.python, '-m', 'pip', 'install', '-q',
      project.ext.space, '--upgrade', '-r', buildToolsFile,
      '--no-warn-script-location', '--break-system-packages'
    ]
    exec {
      commandLine args.flatten()
    }
  }
}

/* Find and update __init__ files */
task syncPythonPackages(type: Task) {
  group = 'Build'
  description = 'Find and update __init__ files'
  doLast {
    project.file("$sourceRoot").traverse(type: groovy.io.FileType.DIRECTORIES) { directory ->
      directory.eachFileMatch(~/^__init__\.py$/) { initFile ->
        def pkg = initFile.getCanonicalPath()
          .replaceAll("$sourceRoot/", "")
          .replaceAll("\\/", "\\.")
          .replaceAll("\\.?__init__\\.py", "")
        def modules = []
        initFile.getParentFile().eachFile() { module ->
          if (!module.name.startsWith("__") &&
              !module.name.endsWith("setup.py") &&
              ((module.isFile() && module.name.endsWith(".py")) ||
              new File(module.getCanonicalPath() + "/__init__.py").exists())) {
            if (!module.isFile() && verbose) {
              println "Syncing package: ${initFile.getParentFile()}/${module.name}"
            }
            modules << "'${module.name.replaceAll("\\.py", "")}'"
          }
        }
        def ver_file = new File(versionFile)
        def cur_version = ver_file.getText().trim()
        initFile.write initTemplate
          .replaceAll("%package%", pkg)
          .replaceAll("%modules%", modules.sort().toString())
          .replaceAll("%version%", cur_version)
          .replaceAll("\\[", "\\[\n    ")
          .replaceAll(", ", ", \n    ")
          .replaceAll("\\]", "\n]")
      }
    }
  }
}

/* Install module in editable mode (i.e. setuptools 'develop mode') */
task installModule(type: Task) {
  group = 'Install'
  description = "Install module in editable mode (i.e. setuptools 'develop mode')"
  dependsOn syncRequirements
  dependsOn installPackages
  doLast {
    fileTree("$sourceRoot").matching {
      include "**/setup.py"
    }.each { File module ->
        def moduleDir = dirName(module)
        def args = [
          project.python, '-m', 'pip', 'install', '-e', "${sourceRoot}/main",
          '--break-system-packages'
        ]
        println "Install [Editable] module ${project.name} : ${moduleDir} -> ${module.path}"
        exec {
          workingDir "$moduleDir"
          commandLine args.flatten()
        }
      }
  }
}

/* Installs the python module into the system */
task install(type: Task) {
  group = 'Install'
  description = "Installs the python module into the system"
  dependsOn syncRequirements
  dependsOn installPackages
  doLast {
    fileTree("$sourceRoot").matching {
      include "**/setup.py"
    }.each { File module ->
        def moduleDir = dirName(module)
        def args = [
          project.python, '-m', 'pip', 'install', '-q',
          project.space, '--upgrade', moduleDir,
          '--break-system-packages'
        ]
        println "Installing ${project.name} v${project.ext.app_version} using ${project.python}"
        println "Space: ${project.space}"
        exec {
          workingDir "${moduleDir}"
          commandLine args.flatten()
        }
      }
  }
}

/* Uninstall the python module from the system */
task uninstall(type: Task) {
  group = 'Install'
  description = "Uninstall the python module from the system"
  doLast {
    fileTree("$sourceRoot/main").matching {
      include "**/setup.py"
    }.each { File module ->
        def moduleDir = "${module.path.replace(module.name, "")}"
        def args = [
          project.python, '-m', 'pip', 'uninstall', '-y', '-q', project.ext.app_name,
          '--break-system-packages'
        ]
        println "Uninstall $project.name : $moduleDir -> $module.path"
        exec {
          workingDir "$moduleDir"
          commandLine args.flatten()
        }
      }
  }
}

/***** Verification Group */

/* Run all python unittests from sourceRoot */
task check(type: Task) {
  group = 'Verification'
  description = "Run all python unittests from sourceRoot"
  dependsOn compilePython
  dependsOn compileQrc
  doLast {
    println "Executing all unittests from ${sourceRoot}"
    fileTree("${sourceRoot}/test").matching {
      include "**/test_*.py"
    }.each { File file ->
      if (verbose) {
          println ""
          println "  PYTHON_PATHS: "
          println "\t|- ${project.ext.pythonPath.split(':').join('\n\t|- ')}"
          println "Executing unittests from -> ${file.name}"
          println ""
        }
        exec {
          workingDir = dirName(file)
          environment PYTHONPATH: pythonPath
          commandLine project.python, '-m', 'unittest', '-b', '-f', '-v' ,file.path
        }
      }
  }
}

/* Execute pylint against sourceRoot */
task pylint(type: Task) {
  group = 'Verification'
  description = "Execute pylint against sourceRoot"
  doLast {
    def pylintCfg = "${rootDir}/.pylintrc"
    assert new File(pylintCfg).exists()
    def srcDir = "${sourceRoot}/main/${project.name}"
    def disabledChecks = "${pylint_disabled_checks.join(',')}"
    println "[$project.name] Execute pylint \n\t from: ${srcDir}"
    exec {
      workingDir project.rootDir
      commandLine project.python, '-m', 'pylint', "--rcfile=${pylintCfg}",
        "--disable=${disabledChecks}", "${srcDir}", "--fail-under=${project.ext.failScore}"
    }
  }
}

/* Execute mypy against sourceRoot */
task mypy(type: Task) {
  group = 'Verification'
  description = "Execute mypy against sourceRoot"
  doLast {
    def srcDir = "${sourceRoot}/main/${project.name}"
    println "[$project.name] Execute mypy \n\t from: ${srcDir}"
    exec {
      workingDir project.rootDir
      commandLine project.python, '-m', 'mypy', srcDir
    }
  }
}

/***** Task Wrappers */

tasks.register('clean', Task) {
  group = 'Build'
  dependsOn cleanPython
  dependsOn cleanDist
}

tasks.register('compile', Task) {
  group = 'Build'
  dependsOn compilePython
  dependsOn compileQrc
}

tasks.register('buildOnly', Task) {
  group = 'Build'
  dependsOn clean
  dependsOn compile
}

tasks.register('build', Task) {
  group = 'Build'
  dependsOn clean
  dependsOn compile
  dependsOn check
}
