/*
    Gradle build versioning extension

    Created: 4th March, 2021
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright·(c)·2024,·HSPyLib
    This module uses python module bumpver: https://pypi.org/project/bumpver/
    Note: Following Semantic Versioning 2.0.0 => https://semver.org/
    - Increment the MAJOR version when making incompatible API changes
    - Increment the MINOR version when adding functionality in a backwards-compatible manner
    - Increment the PATCH version when making backwards-compatible bug fixes. (Source)
*/

String relPath(String absPath) {
  return absPath.replace("${project.projectDir}/", '')
}

/* Tasks ------------------------------------------------------------------- */

/* Increment the build number (patch) */
task patchVersion(type: Task) {
  group = 'Versioning'
  description = 'Increment the build number for publishing (patch)'
  outputs.upToDateWhen { false }
  finalizedBy syncPythonPackages
  doLast {
    println "Patching the build number"
    exec {
      commandLine project.python, '-m', 'bumpver', 'update', '--patch'
    }
  }
}

/* Increment the build number (minor) */
task updateMinor(type: Task) {
  group = 'Versioning'
  description = 'Increment the build number (minor)'
  outputs.upToDateWhen { false }
  finalizedBy syncPythonPackages
  doLast {
    println "Updating the minor number"
    exec {
      commandLine project.python, '-m', 'bumpver', 'update', '--minor'
    }
  }
}

/* Increment the build number (major) */
task updateMajor(type: Task) {
  group = 'Versioning'
  description = 'Increment the build number (major)'
  outputs.upToDateWhen { false }
  finalizedBy syncPythonPackages
  doLast {
    println "Updating the major number"
    exec {
      commandLine project.python, '-m', 'bumpver', 'update', '--major'
    }
  }
}

/* Check current program version */
task version(type: Task) {
  group = 'Versioning'
  description = 'Check current program version'
  outputs.upToDateWhen { false }
  doLast { task ->
    println "Module: [$task.project.name] Current Version: $project.ext.app_version"
  }
}

/* List all properties from properties.gradle */
task listProperties(type: Task) {
  group = 'Versioning'
  description = 'List all properties from gradle.properties'
  outputs.upToDateWhen { false }
  doLast {
    def regex = /.*=.*$/
    File propsFile = project.file('gradle.properties')
    if (propsFile.exists()) {
      println "\n[${project.name}] Checking properties from: " + relPath("${propsFile}") + "\n"
      propsFile.eachLine { line ->
        if (line?.trim() && line ==~ regex) {
          // Extract the name and version from line: '<property> = <value>'
          def (name, value) = line.tokenize('=')
          println "${name.padRight(40, ' ')} => ${value.padRight(10, ' ')}"
        }
      }
    }
    println "".padRight(80, '-')
    println "SOURCE_ROOT".padRight(40, ' ') + " =>  " \
      + relPath("${project.ext.sourceRoot}")
    println "PYTHON_PATH".padRight(40, ' ') + " =>  " \
      + relPath("${project.ext.pythonPath}").split(':').join(', ')
    println "Application".padRight(40, ' ') + " =>  " \
      + relPath("${project.ext.has('application') ? project.ext.application : 'N/A'}")
  }
}

/* Generate a changelog with the commits from last git tag */
task changelog(type: Task) {
  group = 'Versioning'
  description = "Generate a changelog with the commits from last git tag"
  doLast {
    def out = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--abbrev=0', 'HEAD^'
      standardOutput = out
    }
    def lastTag = out.toString().trim()
    if (!lastTag) {
      raise new StopActionException("Unable to fetch latest tag")
    }
    out.reset()
    exec {
      commandLine 'git', 'log', '--oneline', "--pretty='%h %ad %s'", '--date=short', "${lastTag}..HEAD"
      standardOutput = out
      errorOutput = standardOutput
    }
    println("\nShowing changelog commits from: ${lastTag}")
    println("--------------------------------------------------------------------------------")
    out.each(s ->
      println(s)
    )
  }
}
