/*
    Gradle root build file
    Project: HSPyLib
    Created: 1st July, 2020
*/
plugins {
  id 'idea'
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

idea {
  module {
    settings {
      rootModuleType = 'PYTHON_MODULE'
    }
    excludeDirs += file('.idea')
    excludeDirs += file('.gradle')
    excludeDirs += file('.vscode')
    excludeDirs += file('.run')
    excludeDirs += file('run-configs')
    excludeDirs += file('devel')
  }
}

apply from: "${rootDir}/gradle/idea.gradle"

/* Project extension properties */
ext {
  python = "python" + (System.getenv('PYTHON_VERSION') ?: '3')
  pyrcc = "pyrcc" + (System.getenv('PYRCC_VERSION') ?: '5')
  buildTools = "${buildTools}".split(",")
  buildToolsFile = new File("${project.projectDir}/buildTools.txt")
  modulesDir = "${project.projectDir}/modules/"
  gradleDir = "${project.projectDir}/gradle"
  verbose = findProperty('verbose') ?: false
  startTime = System.currentTimeMillis()
}

configurations {
    modules
}

dependencies {
    file('modules').eachDir { dir ->
      project("$dir.name")
    }
}

subprojects {

  tasks.withType(Exec) {
    doFirst {
      println ">>> ${commandLine}"
    }
  }

  ext {
    python = "${rootProject.python}"
  }

  project.afterEvaluate {
    assert project.ext.has("sourceRoot")
    assert project.ext.has("pythonPath")
  }
}

/* List project modules */
task listModules(type: Task) {
  group = 'Other'
  description = 'List project modules'
  doLast {
    println("\nListing " + project.name + " modules ...")
    println("Modules Dir: " + modulesDir + "\n")
    subprojects.forEach {
      println(sprintf(
        "Module: %-12s Version: %-10s Source: %s",
        it.name, it.app_version, it.sourceRoot.replaceAll(modulesDir, '')
      ))
    }
  }
}

/* Download and extract the yorevs/py-gradle project ZIP */
tasks.register('pyGradleUpdate') {
  group = 'pygradle'
  description = 'Download and extract the py-gradle project ZIP'
  doLast {
    def outFile = "${gradleDir}/py-gradle.zip"
    def url = "https://github.com/yorevs/py-gradle/archive/master.zip"
    println "Downloading the py-gradle project"
    println "  From: ${url}"
    println "  Into: ${outFile}"
    mkdir gradleDir
    delete fileTree(gradleDir).matching {
      include "**/*.gradle"
    }
    exec {
      commandLine 'curl', '-L', '-o', "${outFile}", url
    }
    copy {
      from zipTree("${outFile}")
      into "${gradleDir}"
    }
    copy {
      from "${gradleDir}/py-gradle-master/src/main/groovy"
      into "${gradleDir}"
      include '**/*.gradle'
    }
    delete "${gradleDir}/py-gradle-master", "${outFile}"
  }
}
