/*
    Gradle root build file
    Project: HSPyLib
    Created: 1st July, 2020
*/
plugins {
  id 'idea'
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

idea {
  module {
    settings {
      rootModuleType = 'PYTHON_MODULE'
    }
    excludeDirs += file('.idea')
    excludeDirs += file('.gradle')
    excludeDirs += file('.vscode')
    excludeDirs += file('run-configs')
    excludeDirs += file('devel')
  }
}

configurations {
    modules
}

dependencies {
    project(':cfman')
    project(':datasource')
    project(':firebase')
    project(':hspylib')
    project(':kafman')
    project(':vault')
}

subprojects {

  tasks.withType(Exec) {
    doFirst {
      println commandLine
    }
  }

  apply from: "$projectDir/gradle.properties"

  project.afterEvaluate {
    assert project.ext.has("sourceRoot")
    assert project.ext.has("pythonPath")
  }
}

/* Project extension properties */
ext {
  python = "python${pythonVersion}"
  pyrcc = "pyrcc${pyrccVersion}"
  buildTools = "${buildTools}".split(",")
  startTime = System.currentTimeMillis()
  verbose = findProperty('verbose') ?: false
}

apply from: "$rootDir/gradle/idea.gradle"

/* List project modules */
task listModules(type: Task) {
  group = 'Other'
  description = 'List project modules'
  doLast {
    def projectDir = project.projectDir.toString() + "/modules"
    println("\nListing " + project.name + " modules ...")
    println("Modules Dir: " + projectDir + "\n")
    subprojects.forEach {
      println(sprintf(
        "Module: %-12s Version: %-10s SrcRoot: %s",
        it.name, it.app_version, it.sourceRoot.replaceAll(projectDir + "/", '')
      ))
    }
  }
}

/* Install hspylib build tools */
task installBuildTools(type: Task) {
  group = 'Install'
  description = 'Install hspylib build tools'
  doLast {
    println "Upgrading pip module to the latest "
    exec {
      commandLine rootProject.python, '-m', 'ensurepip', '-q', '--upgrade'
      commandLine rootProject.python, '-m', 'pip', '-q', 'install', '--upgrade', 'pip'
    }
    println "Installing build tools: [\n\t ${rootProject.buildTools.join(',\n\t')}\n]"
    rootProject.buildTools.each { tool ->
      exec {
        commandLine rootProject.python, '-m', 'pip', 'install', '--upgrade', tool
      }
    }
  }
}

/* Generate a changelog with the commits from last git tag */
task changelog(type: Task) {
  group = 'Publish'
  description = "Generate a changelog with the commits from last git tag"
  doLast {
    def out = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'describe', '--tags', '--abbrev=0', 'HEAD^'
      standardOutput = out
    }
    def lastTag = out.toString().trim()
    if (!lastTag) {
      raise new StopActionException("Unable to fetch latest tag")
    }
    out.reset()
    exec {
      commandLine 'git', 'log', '--oneline', "--pretty='%h %ad %s'", '--date=short', "${lastTag}..HEAD"
      standardOutput = out
      errorOutput = standardOutput
    }
    println("\nShowing changelog commits from: ${lastTag}")
    println("--------------------------------------------------------------------------------")
    out.each(s ->
      println(s)
    )
  }
}
