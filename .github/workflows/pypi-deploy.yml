name: pypi-deploy
run-name: PyPi Deploy

on:
  workflow_dispatch:
    inputs:
      pypi_env:
        description: 'PyPi instance to publish ?'
        default: 'pypi-test'
        required: true
        type: environment
      cfman:
        description: 'Deploy HSPyLib-CFman ?'
        default: false
        required: true
        type: boolean
      clitt:
        description: 'Deploy HSPyLib-CLItt ?'
        default: false
        required: true
        type: boolean
      datasource:
        description: 'Deploy HSPyLib-Datasource ?'
        default: false
        required: true
        type: boolean
      firebase:
        description: 'Deploy HSPyLib-Firebase ?'
        default: false
        required: true
        type: boolean
      hqt:
        description: 'Deploy HSPyLib-HQT ?'
        default: false
        required: true
        type: boolean
      hspylib:
        description: 'Deploy HSPyLib-Core ?'
        default: false
        required: true
        type: boolean
      kafman:
        description: 'Deploy HSPyLib-Kafman ?'
        default: false
        required: true
        type: boolean
      setman:
        description: 'Deploy HSPyLib-Setman ?'
        default: false
        required: true
        type: boolean
      vault:
        description: 'Deploy HSPyLib-Vault ?'
        default: false
        required: true
        type: boolean

permissions:
  contents: write

jobs:
  set-env-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix-items.outputs.matrix }}
    steps:
      - id: set-matrix-items
        run: |
          modules=('cfman' 'clitt' 'datasource' 'firebase' 'hqt' 'hspylib' 'kafman' 'setman' 'vault')
          JSON="{\"include\":["
          # Loop by lines
          while read -r module;
          do
            if [[ (${module} == 'cfman' && "true" == "${{inputs.cfman}}") ||
                  (${module} == 'clitt' && "true" == "${{inputs.clitt}}") ||
                  (${module} == 'datasource' && "true" == "${{inputs.datasource}}") ||
                  (${module} == 'firebase' && "true" == "${{inputs.firebase}}") ||
                  (${module} == 'hqt' && "true" == "${{inputs.hqt}}") ||
                  (${module} == 'hspylib' && "true" == "${{inputs.hspylib}}") ||
                  (${module} == 'kafman' && "true" == "${{inputs.kafman}}") ||
                  (${module} == 'setman' && "true" == "${{inputs.setman}}") ||
                  (${module} == 'vault' && "true" == "${{inputs.vault}}")]]
            then
              JSONline="{\"module\": \"${module}\"},"
              if [[ "$JSON" != *"$JSONline"* ]]; then
                JSON="$JSON$JSONline"
              fi
            fi
          done < <(printf '%s\n' "${modules[@]}")
          # Remove last ","
          if [[ $JSON == *, ]]; then
            JSON="${JSON%?}"
          fi
          # Add closing brackets
          JSON="$JSON]}"
          echo "matrix=$( echo "$JSON" )" >> $GITHUB_OUTPUT

  deploy:
    needs: set-env-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-env-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.pypi_env }}
    env:
      PYPI_REPOSITORY: ${{ vars.PYPI_REPOSITORY }}
      PYPI_MODULE_URL: ${{ vars.PYPI_MODULE_URL }}
      PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
      PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      PYPI_MODULE: ${{ matrix.module }}
    outputs:
      modules: ${{ steps.deploy-info.outputs.modules }}
    steps:
      - uses: actions/checkout@v3
      - name: Deploy Information
        id: deploy-info
        run: |
          echo "modules=$(echo ${{ matrix.module }})" >> $GITHUB_OUTPUT

  update-version:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Update patch number
        run: |
          echo "${{ needs.deploy.outputs.modules }}"

  create-release:
    needs:
      - deploy
      - update-version
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Git Tag Version
        uses: yorevs/hspylib/.github/actions/tag-version@master
        with:
          tag-name: "v${{ github.run_number }}"
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Changelog
        id: change-log
        uses: yorevs/hspylib/.github/actions/changelog@master
        with:
          tag-name: "v${{ github.run_number }}"
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "${{ vars.APP_NAME }}-v${{ github.run_number }}"
          body: |
            ${{ steps.change-log.outputs.changelog }}
          draft: false
          prerelease: false


