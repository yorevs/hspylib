name: pypi-deploy
run-name: PyPi Deploy

on:
  workflow_dispatch:
    inputs:
      pypi_env:
        description: 'PyPi instance to publish ?'
        default: 'pypi-test'
        required: true
        type: choice
        options:
          - pypi-test
          - pypi-prod
      cfman:
        description: 'Deploy HSPyLib-Cfman ?'
        default: false
        required: true
        type: boolean
      clitt:
        description: 'Deploy HSPyLib-Clitt ?'
        default: false
        required: true
        type: boolean
      datasource:
        description: 'Deploy HSPyLib-Datasource ?'
        default: false
        required: true
        type: boolean
      firebase:
        description: 'Deploy HSPyLib-Firebase ?'
        default: false
        required: true
        type: boolean
      hqt:
        description: 'Deploy HSPyLib-HQT ?'
        default: false
        required: true
        type: boolean
      hspylib:
        description: 'Deploy HSPyLib-Core ?'
        default: false
        required: true
        type: boolean
      kafman:
        description: 'Deploy HSPyLib-Kafman ?'
        default: false
        required: true
        type: boolean
      setman:
        description: 'Deploy HSPyLib-Setman ?'
        default: false
        required: true
        type: boolean
      vault:
        description: 'Deploy HSPyLib-Vault ?'
        default: false
        required: true
        type: boolean

permissions:
  contents: write

jobs:
  set-env-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix-items.outputs.matrix }}
      modules: ${{ steps.set-matrix-items.outputs.modules }}
    steps:
      - name: Check Branch
        run: |
          if [[ "${{ inputs.pypi_env }}" == "pypi-test" &&
             "${{ github.ref_name }}" != 'develop' ]]; then
             echo "Can only deploy to 'pypi-test' from develop"
             exit 1
          fi
          if [[ "${{ inputs.pypi_env }}" == "pypi-prod" &&
             "${{ github.ref_name }}" != 'master' ]]; then
             echo "Can only deploy to 'pypi-prod' from master"
             exit 1
          fi
      - name: Set Matrix Items
        id: set-matrix-items
        run: |
          selected=()
          modules=('cfman' 'clitt' 'datasource' 'firebase' 'hqt' 'hspylib' 'kafman' 'setman' 'vault')
          JSON="{\"include\":["
          # Loop by lines
          while read -r module;
          do
            if [[ (${module} == 'cfman' && "true" == "${{inputs.cfman}}") ||
                  (${module} == 'clitt' && "true" == "${{inputs.clitt}}") ||
                  (${module} == 'datasource' && "true" == "${{inputs.datasource}}") ||
                  (${module} == 'firebase' && "true" == "${{inputs.firebase}}") ||
                  (${module} == 'hqt' && "true" == "${{inputs.hqt}}") ||
                  (${module} == 'hspylib' && "true" == "${{inputs.hspylib}}") ||
                  (${module} == 'kafman' && "true" == "${{inputs.kafman}}") ||
                  (${module} == 'setman' && "true" == "${{inputs.setman}}") ||
                  (${module} == 'vault' && "true" == "${{inputs.vault}}")]]
            then
              selected+=("${module}")
              JSONline="{\"module\": \"${module}\"},"
              if [[ "$JSON" != *"$JSONline"* ]]; then
                JSON="$JSON$JSONline"
              fi
            fi
          done < <(printf '%s\n' "${modules[@]}")
          # Remove last ","
          if [[ $JSON == *, ]]; then
            JSON="${JSON%?}"
          fi
          # Add closing brackets
          JSON="$JSON]}"
          echo "matrix=$( echo "$JSON" )" >> $GITHUB_OUTPUT
          echo "modules=$( echo "${selected[*]}" )" >> $GITHUB_OUTPUT

  update-version:
    needs:
      - set-env-matrix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ vars.JAVA_VERSION }}
      - uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ vars.GRADLE_VERSION }}
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install Python tools
        run: gradle installBuildTools
      - name: Patch Versions & Commit
        run: |
          for module in ${{ needs.set-env-matrix.outputs.modules }};
          do
            gradle "${module}:patchVersion"
          done
          if [[ -n $(git status --porcelain) ]]; then
            git config --global user.name "$(git log -n 1 --pretty=format:%an)"
            git config --global user.email "$(git log -n 1 --pretty=format:%ae)"
            git config github.token "${{ inputs.github-token }}"
            git commit -a -m "[@${{ github.actor }}] Push for new deployment -> '${{ matrix.module }}'"
            git pull --rebase -Xtheirs && git push --atomic origin HEAD
          fi

  deploy:
    needs:
      - set-env-matrix
      - update-version
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-env-matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.pypi_env }}
    env:
      PYPI_REPOSITORY: ${{ vars.PYPI_REPOSITORY }}
      PYPI_MODULE_URL: ${{ vars.PYPI_MODULE_URL }}
      PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
      PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      PYPI_MODULE: ${{ matrix.module }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ vars.JAVA_VERSION }}
      - uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ vars.GRADLE_VERSION }}
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ vars.PYTHON_VERSION }}
      - name: Install Python tools
        run: gradle installBuildTools
      - name: Publish modules to PyPi
        run: |
          echo "Deploying module: (${{ matrix.module }}) to: ${{ inputs.pypi_env }} -> ${{ env.PYPI_REPOSITORY }}"
          gradle ${{ matrix.module }}:publish -Pno-patch=true
      - name: Check published package
        run: |
          gradle ${{ matrix.module }}:pypiShow
